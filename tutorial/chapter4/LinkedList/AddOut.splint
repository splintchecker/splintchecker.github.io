Splint 3.0.1.6 --- 14 Mar 2002

AddOut.c: (in function copy_record)
AddOut.c:30:2: Storage b->next reachable from parameter is kept (should be
                  implicitly only)
  Storage derivable from a parameter does not match the alias kind expected for
  the formal parameter. (Use -compmempass to inhibit warning)
   AddOut.c:29:3: Storage b->next becomes kept
AddOut.c: (in function insert_record)
AddOut.c:62:15: Possibly null storage new_record passed as non-null param:
                   copy_record (new_record, ...)
  A possibly null pointer is passed as a parameter corresponding to a formal
  parameter with no /*@null@*/ annotation.  If NULL may be used for this
  parameter, add a /*@null@*/ annotation to the function parameter declaration.
  (Use -nullpass to inhibit warning)
   AddOut.c:61:16: Storage new_record may become null
AddOut.c:63:3: Implicitly only storage new_record->next (type struct emp_rec *)
    not released before assignment (curr aliases lst): new_record->next = curr
  A memory leak has been detected. Only-qualified storage is not released
  before the last reference to it is lost. (Use -mustfreeonly to inhibit
  warning)
AddOut.c:63:3: Implicitly temp storage lst assigned to implicitly only:
                  new_record->next = curr
  Temp storage (associated with a formal parameter) is transferred to a
  non-temporary reference. The storage may be released or new aliases created.
  (Use -temptrans to inhibit warning)
AddOut.c:67:5: Clauses exit with curr->next->next->next referencing kept
    storage in true branch, implicitly only storage in false branch
  The state of a variable is different depending on which branch is taken. This
  means no annotation can sensibly be applied to the storage. (Use -branchstate
  to inhibit warning)
   AddOut.c:63:3: Storage curr->next->next->next becomes kept
AddOut.c:67:5: Clauses exit with curr->next referencing implicitly only storage
                  in true branch, kept storage in false branch
   AddOut.c:63:3: Storage curr->next becomes kept
   AddOut.c:67:5: Storage curr->next becomes implicitly only
AddOut.c:68:10: Kept storage lst returned as implicitly only: lst
  storage is transferred to a non-temporary reference after being passed as
  keep parameter. The storage may be released or new aliases created. (Use
  -kepttrans to inhibit warning)
   AddOut.c:63:3: Storage lst becomes kept
AddOut.c: (in function delete_record)
AddOut.c:87:14: Implicitly temp storage lst returned as implicitly only: lst
AddOut.c:94:8: Implicitly temp storage lst passed as only param (curr aliases
                  lst): free (curr)
AddOut.c:95:10: Variable lst used after being released
  Memory is used after it has been released (either by passing as an only param
  or assigning to an only global). (Use -usereleased to inhibit warning)
   AddOut.c:94:8: Storage lst released
AddOut.c:95:10: Implicitly temp storage lst returned as implicitly only: lst
AddOut.c: (in function find_record)
AddOut.c:109:9: Implicitly temp storage lst returned as implicitly only (curr
                   aliases lst): curr
AddOut.c:113:10: Null storage returned as non-null: NULL
  Function returns a possibly null pointer, but is not declared using
  /*@null@*/ annotation of result.  If function may return NULL, add /*@null@*/
  annotation to the return value declaration. (Use -nullret to inhibit warning)
AddOut.c: (in function main)
AddOut.c:140:29: Possibly null storage test_list passed as non-null param:
                    add_employees (test_list)
   AddOut.c:137:24: Storage test_list may become null
AddOut.c:140:3: Fresh storage test_list (type emp_list) not released before
                   assignment: test_list = add_employees(test_list)
  A memory leak has been detected. Storage allocated locally is not released
  before the last reference to it is lost. (Use -mustfreefresh to inhibit
  warning)
   AddOut.c:137:42: Fresh storage test_list allocated
AddOut.c:145:3: Fresh storage test_list (type emp_list) not released before
                   assignment: test_list = delete_record(test_list, "Hatton")
   AddOut.c:140:3: Fresh storage test_list allocated
AddOut.c:150:3: Fresh storage test_list (type emp_list) not released before
    assignment: test_list = delete_record(test_list, "Bodycombe")
   AddOut.c:145:3: Fresh storage test_list allocated
AddOut.c:155:14: Arrow access from possibly null pointer zim: zim->LastName
  A possibly null pointer is dereferenced.  Value is either the result of a
  function which may return null (in which case, code should check it is not
  null), or a global, parameter or structure field declared with the null
  qualifier. (Use -nullderef to inhibit warning)
   AddOut.c:136:21: Storage zim may become null
AddOut.c:159:3: Fresh storage test_list (type emp_list) not released before
                   assignment: test_list = insert_record(test_list, zim)
   AddOut.c:150:3: Fresh storage test_list allocated
AddOut.c:164:8: Only storage zim->next (type struct emp_rec *) derived from
                   released storage is not released (memory leak): zim
  A storage leak due to incomplete deallocation of a structure or deep pointer
  is suspected. Unshared storage that is reachable from a reference that is
  being deallocated has not yet been deallocated. Splint assumes when an object
  is passed as an out only void pointer that the outer object will be
  deallocated, but the inner objects will not. (Use -compdestroy to inhibit
  warning)
AddOut.c:170:3: Fresh storage test_list (type emp_list) not released before
    assignment: test_list = delete_record(test_list, "Zimmerman")
   AddOut.c:159:3: Fresh storage test_list allocated
AddOut.c:175:12: Fresh storage zim not released before return
   AddOut.c:165:3: Fresh storage zim allocated
AddOut.c:175:12: Fresh storage test_list not released before return
   AddOut.c:170:3: Fresh storage test_list allocated
AddOut.c: (in function add_employees)
AddOut.c:190:30: Possibly null storage fp passed as non-null param:
                    fgets (..., fp)
   AddOut.c:184:14: Storage fp may become null
AddOut.c:192:7: Return value (type int) ignored: sscanf(Line, "%s...
  Result returned by function call is not used. If this is intended, can cast
  result to (void) to eliminate message. (Use -retvalint to inhibit warning)
AddOut.c:193:16: Arrow access from possibly null pointer e: e->LastName
   AddOut.c:182:19: Storage e may become null
AddOut.c:196:32: Passed storage *e contains 1 undefined field: next
  Storage derivable from a parameter, return value or global is not defined.
  Use /*@out@*/ to denote passed or returned storage which need not be defined.
  (Use -compdef to inhibit warning)
AddOut.c:197:5: Clauses exit with lst referencing fresh storage in while body,
                   implicitly temp storage if loop is not taken
   AddOut.c:196:7: Fresh storage lst allocated
AddOut.c:198:10: Implicitly temp storage lst returned as implicitly only: lst
AddOut.c:198:14: Fresh storage e not released before return
   AddOut.c:182:38: Fresh storage e allocated

Finished checking --- 30 code warnings
