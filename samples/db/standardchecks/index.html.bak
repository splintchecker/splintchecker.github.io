<html
<head>
<title> LCLint Sample - Standard Checks</title>
</head>
<body bgcolor="#FFFFFF" link="#CC0000" alink="#FF3300" vlink="#000088">

<h1>
LCLint Sample - Standard Checks<BR>
</h1>

<H3> Changes from <A HREF="../useiters/index.html">Iterators</A> </H3>

<A HREF="diffs.html">Differences</A>  
<P>
Code has be rewritted to use stylized iterators.  

<P>

Running LCLint with weak checking detects <A HREF="lclint-weak.out.html">no errors</A>.


<H3> Modules </H3>

<UL>
<LI>employee - employee datatype (<A HREF="employee.lcl.html">LCL</A>,
<A HREF="employee.c.html">Code</A>,  <A HREF="employee.h.html">Header</A>)
<LI>empset - sets of employees (<A HREF="empset.lcl.html">LCL</A>,
<A HREF="empset.c.html">Code</A>,  <A HREF="empset.h.html">Header</A>)
<LI>dbase - database of employees (<A HREF="dbase.lcl.html">LCL</A>, 
<A HREF="dbase.c.html">Code</A>,  <A HREF="dbase.h.html">Header</A>)
<LI>eref - reference to an employee (<A HREF="eref.lcl.html">LCL</A>,
<A HREF="eref.c.html">Code</A>,  <A HREF="eref.h.html">Header</A>)
<LI>erc - collection of erefs (<A HREF="erc.lcl.html">LCL</A>, <A
HREF="erc.c.html">Code</A>,  <A HREF="erc.h.html">Header</A>)
<LI>ereftab - table of employees and erefs (<A
HREF="ereftab.lcl.html">LCL</A>, <A HREF="ereftab.c.html">Code</A>, <A HREF="ereftab.h.html">Header</A>)
</UL>

<H3> Standard Checking </h3>

Now we run LCLint in standard mode, but use <tt>-memchecks</tt> to turn
off checks relating to memory management (they will be covered in the 
<A HREF="../memchecks1/index.html"> next section</A>).

<P>

LCLint reports <A HREF="lclint.out.html">43 anomalies</A>.
<P>

<h4><A href="../../../guide/guide.html#sec-10.3.2">Ignored Return Values</a></h4>

Eighteen errors involved ignored boolean return values:
<PRE>
<A HREF="empset.c.html#line104">empset.c:104,2</A>: Return value (type bool) ignored: empset_insert(re...
  Result returned by function call is not used.  If this is intended, can cast
  result to (void) to eliminate message.  Use -retvalbool to suppress message.
empset.c: (in function empset_intersect)
<A HREF="empset.c.html#line117">empset.c:117,2</A>: Return value (type bool) ignored: empset_insert(to...
<A HREF="empset.c.html#line122">empset.c:122,7</A>: Return value (type bool) ignored: empset_delete(s1...
ereftab.c: (in function ereftab_delete)
<A HREF="ereftab.c.html#line24">ereftab.c:24,3</A>: Return value (type bool) ignored: erc_delete(t, er)
dbase.c: (in function _db_addEmpls)
<A HREF="dbase.c.html#line78">dbase.c:78,4</A>: Return value (type bool) ignored: empset_insert(s, e)
dbase.c: (in function fire)
<A HREF="dbase.c.html#line133">dbase.c:133,8</A>: Return value (type bool) ignored: erc_delete(db[i]...
dbase.c: (in function promote)
<A HREF="dbase.c.html#line165">dbase.c:165,7</A>: Return value (type bool) ignored: erc_delete(db[mN...
<A HREF="dbase.c.html#line170">dbase.c:170,7</A>: Return value (type bool) ignored: erc_delete(db[fN...
<A HREF="drive.c.html#line49">drive.c:49,7</A>: Return value (type bool) ignored: employee_setName...
<A HREF="drive.c.html#line50">drive.c:50,7</A>: Return value (type bool) ignored: empset_insert(em...
<A HREF="drive.c.html#line65">drive.c:65,7</A>: Return value (type bool) ignored: employee_setName...
<A HREF="drive.c.html#line66">drive.c:66,7</A>: Return value (type bool) ignored: empset_delete(em...
<A HREF="drive.c.html#line83">drive.c:83,7</A>: Return value (type bool) ignored: employee_setName...
<A HREF="drive.c.html#line84">drive.c:84,7</A>: Return value (type bool) ignored: empset_insert(em...
<A HREF="drive.c.html#line108">drive.c:108,7</A>: Return value (type bool) ignored: empset_delete(em...
<A HREF="drive.c.html#line120">drive.c:120,7</A>: Return value (type bool) ignored: employee_setName...
<A HREF="drive.c.html#line135">drive.c:135,3</A>: Return value (type bool) ignored: fire(17)
<A HREF="drive.c.html#line159">drive.c:159,3</A>: Return value (type bool) ignored: fire(empset_choo...
</PRE>
These anomalies were not reported using <tt>weak</tt> checking, since
the flag <tt>retvalbool</tt> that controls reporting of ignored boolean
return values is not set.  We could use <tt>-retvalbool</tt> to suppress
these errors.  Instead, we check to see if it is really safe to ignore
the return values.

The result of <tt>empset_insert</tt>, <tt>empset_delete</tt> and
<tt>erc_delete</tt> indicate whether the given element was in the
set.  Its okay to ignore this value, so we change the declarations to
indicate that the result may be ignores:
<PRE>
| bool : void | empset_insert (empset s, employee e) 
</PRE>

In a C file we would use:
<PRE>
bool /*@alt void@*/ empset_insert (empset s, employee e)
</PRE>

The other six ignored return value messages are for calls to
<tt>employee_setName</tt> and <tt>fire</tt> in the test driver.  The
result of <tt>fire</tt> and <tt>employee_setName</tt> is an error code
--- it returns <tt>TRUE</tt> unless an error has occurred.  So, it would
be a good idea to check these results.  

Originally, I added assertions around the calls.  This produces new
messages:
<pre>
drive.c:83,15: Parameter 1 to assert is declared sef, but the argument may
                  modify e.name: employee_setName(&e, na)
  An actual parameter corresponding to a sef parameter may have a side-effect. 
  Use -sefparams to suppress message.
</pre>

The standard library declares the parameter to <tt>assert</tt> to be
side-effect free.  This is a good idea, since if <tt>NDEBUG</tt> is set
the parameter is not evaluated.  We replace the calls to <tt>assert</tt>
with a <tt>check</tt> macro (introduced in <A
HREF="../weakchecks/index.html#check">Weak Checks</a>.)

<h4> <A href="../../../guide/guide.html#flag-exitarg">Exit Calls</a></h4>

Seven of the errors involve calls to the system <tt>exit</tt> function, e.g.:
<pre>
eref.c: (in function eref_alloc)
<A HREF="eref.c.html#line25">eref.c:25,10</A>: Argument to exit has implementation defined behavior: 1
  The argument to exit should be 0, EXIT_SUCCESS or EXIT_FAILURE  Use -exitarg
  to suppress message.
</pre>

The argument to <tt>exit</tt> should not be <tt>1</tt>, since its
meaning is implementation defined.  We replace these calls to use
<tt>EXIT_FAILURE</tt> instead.

<h4> <A href="../../../guide/guide.html#sec-10.3.2">No Effect</a></h4>

Eleven messsages report statements with no effect:

<PRE>
<A HREF="eref.c.html#line60">eref.c:60,3</A>: Statement has no effect: employee_initMod()
  Statement has no visible effect --- no values are modified.  Use -noeffect to
  suppress message.
empset.c: (in function empset_initMod)
<A HREF="empset.c.html#line143">empset.c:143,3</A>: Statement has no effect: employee_initMod()
<A HREF="empset.c.html#line145">empset.c:145,3</A>: Statement has no effect: erc_initMod()
<A HREF="empset.c.html#line146">empset.c:146,3</A>: Statement has no effect: ereftab_initMod()
ereftab.c: (in function ereftab_initMod)
<A HREF="ereftab.c.html#line44">ereftab.c:44,3</A>: Statement has no effect: erc_initMod()
erc.h: (in macro erc_initMod)
<A HREF="erc.h.html#line16">erc.h:16,36</A>: Statement has no effect: employee_initMod()
dbase.c: (in function db_initMod)
<A HREF="dbase.c.html#line27">dbase.c:27,3</A>: Statement has no effect: employee_initMod()
<A HREF="dbase.c.html#line29">dbase.c:29,3</A>: Statement has no effect: erc_initMod()
<A HREF="dbase.c.html#line30">dbase.c:30,3</A>: Statement has no effect: empset_initMod()
drive.c: (in function main)
<A HREF="drive.c.html#line23">drive.c:23,3</A>: Statement has no effect: employee_initMod()
<A HREF="drive.c.html#line24">drive.c:24,3</A>: Statement has no effect: empset_initMod()
</PRE>

All involve calls to <tt>initMod</tt> functions that were specified to
modify nothing.  They should have been specified with,
<pre>
   modifies internalState;
</pre>

to indicate that no client-visible state is modified, but the state
internal to the implementation module may be modified.

<h4><A href="../../../guide/guide.html#sec-3.3">Boolean Comparisons </a></h4>

One message reports a boolean comparison:
<PRE>
eref.c: (in function eref_alloc)
<A HREF="eref.c.html#line53">eref.c:53,7</A>: Use of == with bool variables (risks inconsistency because of
                multiple true values): needsInit == FALSE
  Two bool values are compared directly using a C primitive.  This may produce
  unexpected results since all non-zero values are considered TRUE, so different
  TRUE values may not be equal.  The file bool.h (included in lclint/lib)
  provides bool_equal for safe bool comparisons.  Use -boolcompare to suppress
  message.
</PRE>

Since the comparison was to <tt>FALSE</tt>, we replace it with
<tt>!needsInit</tt>.  (An equality comparison with <tt>FALSE</tt> should
be safe, anyway, since there is usually only one <tt>FALSE</tt> value.
Whether or not this makes the code more readable is infinitely
debatable.)

<h4> <A href="../../../guide/guide.html#sec-7.1">Use Before Definition </a></h4>

One message reports a use before definition:
<PRE>
<A HREF="drive.c.html#line132">drive.c:132,34</A>: Variable j used before definition
  An rvalue is used that may not be initialized to a value on some execution
  path.  Use -usedef to suppress message.
</pre>

Here, the <A HREF="drive.c.html#line113"> loop </A> before the use of
<tt>j</tt> defines <tt>j</tt> on one branch inside the loop but not the
other one.  Looking at the code, we know the branch that defined
<tt>j</tt> must be taken since it is taken every other time through the
loop and the loop iterates from 0 to 19.  We suppress the error by
surrounding the use of <tt>j</tt> with <tt>-usedef</tt> and
<tt>=usedef</tt> control comments.

<h4> <A href="../../../guide/guide.html#sec-8.2">Macro Parenthesis </a></h4>

Four messages concern missing parenthesis on macro parameters:

<PRE>
eref.h: (in macro eref_assign)
<A HREF="eref.h.html#line24">eref.h:24,54</A>: Macro parameter used without parentheses: e
  A macro parameter is used without parentheses.  This could be dangerous if the
  macro is invoked with a complex expression and precedence rules will change
  the evaluation inside the macro.  Use -macroparens to suppress message.
eref.h: (in macro eref_equal)
<A HREF="eref.h.html#line26">eref.h:26,32</A>: Macro parameter used without parentheses: er1
<A HREF="eref.h.html#line26">eref.h:26,39</A>: Macro parameter used without parentheses: er2
erc.h: (in macro erc_choose)
<A HREF="erc.h.html#line15">erc.h:15,26</A>: Macro parameter used without parentheses: c
</PRE>

In some contexts it is dangerous to use a macro parameter without
enclosing parenthesis, since the macro may be invoked with an argument
in a way that it does not have the expected evaluation order.  These are
fixed by added parentheses around the parameters where there are used.

<h4> <A href="../../../guide/guide.html#sec-10.4">Unused Parameters</a> </h4>

One message reports an unused paramter:
<PRE>
drive.c: (in function main)
<A HREF="drive.c.html#line12">drive.c:12,26</A>: Parameter argv not used
  A function parameter is not used in the body of the function.  If the argument
  is needed for type compatibility or future plans, use /*@unused@*/ in the
  argument declaration.  Use -paramuse to suppress message.
</pre>

Its okay not to use the <tt>argv</tt> parameter to <tt>main</tt>.  To
suppress the error, we add <tt>/*@unused@*/</tt> before the parameter
declaration.

<P>
<HR>
<A HREF="run.html">
<IMG ALIGN=left SRC =
"http://larch-www.lcs.mit.edu:8001/larch/lclint/lclint-run.jpg" ALT = "Run LCLint"></A>
<A HREF="../memchecks1/index.html">
<IMG ALIGN=left SRC =
"http://larch-www.lcs.mit.edu:8001/larch/lclint/right-arrow.jpg" ALT =
"Continue to Memory Checks 1"></A>
<A HREF="../index.html">
<IMG ALIGN=left SRC = "http://larch-www.lcs.mit.edu:8001/larch/lclint/up-arrow.jpg" ALT = "Return to Summary"></A>
<A HREF="http://larch-www.lcs.mit.edu:8001/larch/lclint/index.html">
<IMG ALIGN=left SRC = "http://larch-www.lcs.mit.edu:8001/larch/lclint/lclint-home-small.jpg" ALT = "LCLint Home Page"></A>
<author> <a href="http://larch-www.lcs.mit.edu:8001/~evs">David
Evans</a> <br>
<A href="http://larch-www.lcs.mit.edu:8001/">Systematic Program Develpoment</A><br>
<a
href="mailto:evs@larch.lcs.mit.edu"><em>evs@larch.lcs.mit.edu</em></a>
</author>
</body>
</html>
