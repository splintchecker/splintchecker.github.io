%PASSED Output from LCLint 2.0
%LCLimports 
%LCLSortTable
%LCLsort bool immutable nil nil
%LCLsort Bool synonym bool nil
%LCLsort int primitive nil nil
%LCLsort char primitive nil nil
%LCLsort void primitive nil nil
%LCLsort _char_Obj obj char nil
%LCLsort __char_Obj_Ptr ptr _char_Obj nil
%LCLsort __char_Obj_Arr arr _char_Obj nil
%LCLsort _char_Vec vec char __char_Obj_Arr
%LCLsort float primitive nil nil
%LCLsort double primitive nil nil
%LCLsort _size_t synonym int nil
%LCLsort _wchar_t synonym int nil
%LCLsort _sstdlib0s_Struct str sstdlib0s nil
%LCLsort rem strMem _int_Obj nil
%LCLsort quot strMem _int_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort _int_Obj obj int nil
%LCLsort _sstdlib0s_Struct_Tuple tup _sstdlib0s_Struct nil
%LCLsort __sstdlib0s_Struct_Ptr ptr _sstdlib0s_Struct nil
%LCLsort __sstdlib0s_Struct_Arr arr _sstdlib0s_Struct nil
%LCLsort __sstdlib0s_Struct_Tuple_Vec vec _sstdlib0s_Struct_Tuple __sstdlib0s_Struct_Arr
%LCLsort _div_t synonym _sstdlib0s_Struct nil
%LCLsort _sstdlib1s_Struct str sstdlib1s nil
%LCLsort rem strMem _int_Obj nil
%LCLsort quot strMem _int_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort _sstdlib1s_Struct_Tuple tup _sstdlib1s_Struct nil
%LCLsort __sstdlib1s_Struct_Ptr ptr _sstdlib1s_Struct nil
%LCLsort __sstdlib1s_Struct_Arr arr _sstdlib1s_Struct nil
%LCLsort __sstdlib1s_Struct_Tuple_Vec vec _sstdlib1s_Struct_Tuple __sstdlib1s_Struct_Arr
%LCLsort _ldiv_t synonym _sstdlib1s_Struct nil
%LCLsort _void_Obj obj void nil
%LCLsort __void_Obj_Ptr ptr _void_Obj nil
%LCLsort __void_Obj_Arr arr _void_Obj nil
%LCLsort _void_Vec vec void __void_Obj_Arr
%LCLsort _HOF_sort_32 hof nil nil
%LCLsort _HOF_sort_33 hof nil nil
%LCLsort __int_Obj_Ptr ptr _int_Obj nil
%LCLsort __int_Obj_Arr arr _int_Obj nil
%LCLsort _int_Vec vec int __int_Obj_Arr
%LCLsort _HOF_sort_37 hof nil nil
%LCLsort ___char_Obj_Ptr_Obj obj __char_Obj_Ptr nil
%LCLsort ____char_Obj_Ptr_Obj_Ptr ptr ___char_Obj_Ptr_Obj nil
%LCLsort ____char_Obj_Ptr_Obj_Arr arr ___char_Obj_Ptr_Obj nil
%LCLsort ___char_Obj_Ptr_Vec vec __char_Obj_Ptr ____char_Obj_Ptr_Obj_Arr
%LCLsort FILE immutable nil nil
%LCLsort _va_list synonym __void_Obj_Ptr nil
%LCLsort _fpos_t synonym __void_Obj_Ptr nil
%LCLsort _FILE_Obj obj FILE nil
%LCLsort __FILE_Obj_Ptr ptr _FILE_Obj nil
%LCLsort __FILE_Obj_Arr arr _FILE_Obj nil
%LCLsort _FILE_Vec vec FILE __FILE_Obj_Arr
%LCLsort ___FILE_Obj_Ptr_Obj obj __FILE_Obj_Ptr nil
%LCLsort ___void_Obj_Ptr_Obj obj __void_Obj_Ptr nil
%LCLsort ____void_Obj_Ptr_Obj_Ptr ptr ___void_Obj_Ptr_Obj nil
%LCLsort ____void_Obj_Ptr_Obj_Arr arr ___void_Obj_Ptr_Obj nil
%LCLsort ___void_Obj_Ptr_Vec vec __void_Obj_Ptr ____void_Obj_Ptr_Obj_Arr
%LCLsort _eemployee0e_Enum enum eemployee0e nil
%LCLsort GENDER_UNKNOWN enumMem nil nil
%LCLsort FEMALE enumMem nil nil
%LCLsort MALE enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLsort _gender synonym _eemployee0e_Enum nil
%LCLsort _eemployee1e_Enum enum eemployee1e nil
%LCLsort JOB_UNKNOWN enumMem nil nil
%LCLsort NONMGR enumMem nil nil
%LCLsort MGR enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLsort _job synonym _eemployee1e_Enum nil
%LCLsort _semployee0s_Struct str semployee0s nil
%LCLsort j strMem __eemployee1e_Enum_Obj nil
%LCLsort gen strMem __eemployee0e_Enum_Obj nil
%LCLsort salary strMem _int_Obj nil
%LCLsort name strMem __char_Obj_Arr nil
%LCLsort ssNum strMem _int_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort __eemployee0e_Enum_Obj obj _eemployee0e_Enum nil
%LCLsort __eemployee1e_Enum_Obj obj _eemployee1e_Enum nil
%LCLsort _semployee0s_Struct_Tuple tup _semployee0s_Struct nil
%LCLsort __semployee0s_Struct_Ptr ptr _semployee0s_Struct nil
%LCLsort __semployee0s_Struct_Arr arr _semployee0s_Struct nil
%LCLsort __semployee0s_Struct_Tuple_Vec vec _semployee0s_Struct_Tuple __semployee0s_Struct_Arr
%LCLsort _employee synonym _semployee0s_Struct nil
%LCLsort eref immutable nil nil
%LCLsort map immutable nil nil
%LCLsort _map_Obj obj map nil
%LCLsort empset immutable nil nil
%LCLsort _empset_Obj mutable empset nil
%LCLsort ereftab immutable nil nil
%LCLsort _ereftab_Obj mutable ereftab nil
%LCLsort erc immutable nil nil
%LCLsort _erc_Obj mutable erc nil
%LCLsort _sdbase1s_Struct str sdbase1s nil
%LCLsort h strMem _int_Obj nil
%LCLsort l strMem _int_Obj nil
%LCLsort j strMem __eemployee1e_Enum_Obj nil
%LCLsort g strMem __eemployee0e_Enum_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort _sdbase1s_Struct_Tuple tup _sdbase1s_Struct nil
%LCLsort __sdbase1s_Struct_Ptr ptr _sdbase1s_Struct nil
%LCLsort __sdbase1s_Struct_Arr arr _sdbase1s_Struct nil
%LCLsort __sdbase1s_Struct_Tuple_Vec vec _sdbase1s_Struct_Tuple __sdbase1s_Struct_Arr
%LCLsort _db_q synonym _sdbase1s_Struct nil
%LCLsort _edbase2e_Enum enum edbase2e nil
%LCLsort DBS_MISSERR enumMem nil nil
%LCLsort DBS_DUPLERR enumMem nil nil
%LCLsort DBS_JOBERR enumMem nil nil
%LCLsort DBS_GENDERERR enumMem nil nil
%LCLsort DBS_SALERR enumMem nil nil
%LCLsort DBS_OK enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLsort _db_status synonym _edbase2e_Enum nil
%LCLsort db immutable nil nil
%LCLsort _db_Obj obj db nil
%LCLSortTableEnd
%LCLSymbolTable
%LCLop mod :int, int -> int
%LCLop min :int, int -> int
%LCLop max :int, int -> int
%LCLop 0 : -> int
%LCLop 0 : -> double
%LCLop 1 : -> int
%LCLop 1 : -> double
%LCLop if __ then __ else __  :bool, bool, bool -> bool
%LCLop if __ then __ else __  :bool, int, int -> int
%LCLop if __ then __ else __  :bool, double, double -> double
%LCLop if __ then __ else __  :bool, _char_Vec, _char_Vec -> _char_Vec
%LCLop if __ then __ else __  :bool, char, char -> char
%LCLop __ < __  :int, int -> bool
%LCLop __ < __  :double, double -> bool
%LCLop empty : -> _char_Vec
%LCLop __ > __  :int, int -> bool
%LCLop __ > __  :double, double -> bool
%LCLop count :char, _char_Vec -> int
%LCLop head :_char_Vec -> char
%LCLop __ \inv :double -> double
%LCLop init :_char_Vec -> _char_Vec
%LCLop isEmpty :_char_Vec -> bool
%LCLop last :_char_Vec -> char
%LCLop len :_char_Vec -> int
%LCLop __ \implies __  :bool, bool -> bool
%LCLop prefix :_char_Vec, int -> _char_Vec
%LCLop __ / __  :double, double -> double
%LCLop removePrefix :_char_Vec, int -> _char_Vec
%LCLop substring :_char_Vec, int, int -> _char_Vec
%LCLop __ || __  :_char_Vec, _char_Vec -> _char_Vec
%LCLop tail :_char_Vec -> _char_Vec
%LCLop __ \in __  :char, _char_Vec -> bool
%LCLop nullTerminated :_char_Vec -> bool
%LCLop throughNull :_char_Vec -> _char_Vec
%LCLop sameStr :_char_Vec, _char_Vec -> bool
%LCLop lenStr :_char_Vec -> int
%LCLop times10plus :int, int -> int
%LCLop plus1 :int -> int
%LCLop 2 : -> int
%LCLop 3 : -> int
%LCLop 4 : -> int
%LCLop 5 : -> int
%LCLop 6 : -> int
%LCLop 7 : -> int
%LCLop 8 : -> int
%LCLop 9 : -> int
%LCLtag sstdlib0s struct
%LCLop __ * __  :int, int -> int
%LCLop __ * __  :double, double -> double
%LCLop true : -> bool
%LCLop false : -> bool
%LCLop __ \and __  :bool, bool -> bool
%LCLop __ \or __  :bool, bool -> bool
%LCLop __ \eq __  :bool, bool -> bool
%LCLop __ \eq __  :int, int -> bool
%LCLop __ \eq __  :double, double -> bool
%LCLop __ \eq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \eq __  :char, char -> bool
%LCLop \not __  :bool -> bool
%LCLtag sstdlib1s struct
%LCLop __ \neq __  :bool, bool -> bool
%LCLop __ \neq __  :int, int -> bool
%LCLop __ \neq __  :double, double -> bool
%LCLop __ \neq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \neq __  :char, char -> bool
%LCLop { __ } :char -> _char_Vec
%LCLop MALE : -> _eemployee0e_Enum
%LCLop FEMALE : -> _eemployee0e_Enum
%LCLop GENDER_UNKNOWN : -> _eemployee0e_Enum
%LCLtag eemployee0e enum
%LCLop DBS_OK : -> _edbase2e_Enum
%LCLop MGR : -> _eemployee1e_Enum
%LCLop DBS_SALERR : -> _edbase2e_Enum
%LCLop NONMGR : -> _eemployee1e_Enum
%LCLop DBS_GENDERERR : -> _edbase2e_Enum
%LCLop JOB_UNKNOWN : -> _eemployee1e_Enum
%LCLop DBS_JOBERR : -> _edbase2e_Enum
%LCLop DBS_DUPLERR : -> _edbase2e_Enum
%LCLtag eemployee1e enum
%LCLop DBS_MISSERR : -> _edbase2e_Enum
%LCLop [__, __] :int, int -> _sstdlib0s_Struct_Tuple
%LCLop [__, __] :int, int -> _sstdlib1s_Struct_Tuple
%LCLop __ [] :__char_Obj_Ptr -> __char_Obj_Arr
%LCLop __ [] :__sstdlib0s_Struct_Ptr -> __sstdlib0s_Struct_Arr
%LCLop __ [] :__sstdlib1s_Struct_Ptr -> __sstdlib1s_Struct_Arr
%LCLop __ [] :__void_Obj_Ptr -> __void_Obj_Arr
%LCLop __ [] :__int_Obj_Ptr -> __int_Obj_Arr
%LCLop __ [] :____char_Obj_Ptr_Obj_Ptr -> ____char_Obj_Ptr_Obj_Arr
%LCLop __ [] :__FILE_Obj_Ptr -> __FILE_Obj_Arr
%LCLop __ [] :____void_Obj_Ptr_Obj_Ptr -> ____void_Obj_Ptr_Obj_Arr
%LCLop __ [] :__semployee0s_Struct_Ptr -> __semployee0s_Struct_Arr
%LCLop __ [] :__sdbase1s_Struct_Ptr -> __sdbase1s_Struct_Arr
%LCLop __ [__] :_char_Vec, int -> char
%LCLop __ [__] :__char_Obj_Arr, int -> _char_Obj
%LCLop __ [__] :__sstdlib0s_Struct_Tuple_Vec, int -> _sstdlib0s_Struct_Tuple
%LCLop __ [__] :__sstdlib0s_Struct_Arr, int -> _sstdlib0s_Struct
%LCLop __ [__] :__sstdlib1s_Struct_Tuple_Vec, int -> _sstdlib1s_Struct_Tuple
%LCLop __ [__] :__sstdlib1s_Struct_Arr, int -> _sstdlib1s_Struct
%LCLop __ [__] :_void_Vec, int -> void
%LCLop __ [__] :__void_Obj_Arr, int -> _void_Obj
%LCLop __ [__] :_int_Vec, int -> int
%LCLop __ [__] :__int_Obj_Arr, int -> _int_Obj
%LCLop __ [__] :___char_Obj_Ptr_Vec, int -> __char_Obj_Ptr
%LCLop __ [__] :____char_Obj_Ptr_Obj_Arr, int -> ___char_Obj_Ptr_Obj
%LCLop __ [__] :_FILE_Vec, int -> FILE
%LCLop __ [__] :__FILE_Obj_Arr, int -> _FILE_Obj
%LCLop __ [__] :___void_Obj_Ptr_Vec, int -> __void_Obj_Ptr
%LCLop __ [__] :____void_Obj_Ptr_Obj_Arr, int -> ___void_Obj_Ptr_Obj
%LCLop __ [__] :__semployee0s_Struct_Tuple_Vec, int -> _semployee0s_Struct_Tuple
%LCLop __ [__] :__semployee0s_Struct_Arr, int -> _semployee0s_Struct
%LCLop __ [__] :__sdbase1s_Struct_Tuple_Vec, int -> _sdbase1s_Struct_Tuple
%LCLop __ [__] :__sdbase1s_Struct_Arr, int -> _sdbase1s_Struct
%LCLop __ |- __  :_char_Vec, char -> _char_Vec
%LCLop [__, __, __, __] :int, int, _eemployee1e_Enum, _eemployee0e_Enum -> _sdbase1s_Struct_Tuple
%LCLop __ -| __  :char, _char_Vec -> _char_Vec
%LCLop [__, __, __, __, __] :_eemployee1e_Enum, _eemployee0e_Enum, int, _char_Vec, int -> _semployee0s_Struct_Tuple
%LCLop __ \select quot :_sstdlib0s_Struct_Tuple -> int
%LCLop __ \select quot :_sstdlib0s_Struct -> _int_Obj
%LCLop __ \select quot :_sstdlib1s_Struct_Tuple -> int
%LCLop __ \select quot :_sstdlib1s_Struct -> _int_Obj
%LCLtag semployee0s struct
%LCLop __ \field_arrow quot :__sstdlib0s_Struct_Ptr -> _int_Obj
%LCLop __ \field_arrow quot :__sstdlib1s_Struct_Ptr -> _int_Obj
%LCLop __ \select rem :_sstdlib0s_Struct_Tuple -> int
%LCLop __ \select rem :_sstdlib0s_Struct -> _int_Obj
%LCLop __ \select rem :_sstdlib1s_Struct_Tuple -> int
%LCLop __ \select rem :_sstdlib1s_Struct -> _int_Obj
%LCLop __ \leq __  :int, int -> bool
%LCLop __ \leq __  :double, double -> bool
%LCLop __ \field_arrow rem :__sstdlib0s_Struct_Ptr -> _int_Obj
%LCLop __ \field_arrow rem :__sstdlib1s_Struct_Ptr -> _int_Obj
%LCLop __ \geq __  :int, int -> bool
%LCLop __ \geq __  :double, double -> bool
%LCLop __ \select g :_sdbase1s_Struct_Tuple -> _eemployee0e_Enum
%LCLop __ \select g :_sdbase1s_Struct -> __eemployee0e_Enum_Obj
%LCLop __ \select l :_sdbase1s_Struct_Tuple -> int
%LCLop __ \select l :_sdbase1s_Struct -> _int_Obj
%LCLop null : -> char
%LCLop __ \field_arrow g :__sdbase1s_Struct_Ptr -> __eemployee0e_Enum_Obj
%LCLop __ \select h :_sdbase1s_Struct_Tuple -> int
%LCLop __ \select h :_sdbase1s_Struct -> _int_Obj
%LCLop __ \field_arrow l :__sdbase1s_Struct_Ptr -> _int_Obj
%LCLop __ \field_arrow h :__sdbase1s_Struct_Ptr -> _int_Obj
%LCLop __ \select ssNum :_semployee0s_Struct_Tuple -> int
%LCLop __ \select ssNum :_semployee0s_Struct -> _int_Obj
%LCLop __ \select name :_semployee0s_Struct_Tuple -> _char_Vec
%LCLop __ \select name :_semployee0s_Struct -> __char_Obj_Arr
%LCLop __ \field_arrow ssNum :__semployee0s_Struct_Ptr -> _int_Obj
%LCLop __ \select salary :_semployee0s_Struct_Tuple -> int
%LCLop __ \select salary :_semployee0s_Struct -> _int_Obj
%LCLop __ \field_arrow name :__semployee0s_Struct_Ptr -> __char_Obj_Arr
%LCLop __ \select gen :_semployee0s_Struct_Tuple -> _eemployee0e_Enum
%LCLop __ \select gen :_semployee0s_Struct -> __eemployee0e_Enum_Obj
%LCLop __ \field_arrow salary :__semployee0s_Struct_Ptr -> _int_Obj
%LCLop __ \select j :_semployee0s_Struct_Tuple -> _eemployee1e_Enum
%LCLop __ \select j :_semployee0s_Struct -> __eemployee1e_Enum_Obj
%LCLop __ \select j :_sdbase1s_Struct_Tuple -> _eemployee1e_Enum
%LCLop __ \select j :_sdbase1s_Struct -> __eemployee1e_Enum_Obj
%LCLop NIL : -> __char_Obj_Ptr
%LCLop NIL : -> __sstdlib0s_Struct_Ptr
%LCLop NIL : -> __sstdlib1s_Struct_Ptr
%LCLop NIL : -> __void_Obj_Ptr
%LCLop NIL : -> __int_Obj_Ptr
%LCLop NIL : -> ____char_Obj_Ptr_Obj_Ptr
%LCLop NIL : -> __FILE_Obj_Ptr
%LCLop NIL : -> ____void_Obj_Ptr_Obj_Ptr
%LCLop NIL : -> __semployee0s_Struct_Ptr
%LCLop NIL : -> __sdbase1s_Struct_Ptr
%LCLop __ \field_arrow gen :__semployee0s_Struct_Ptr -> __eemployee0e_Enum_Obj
%LCLop __ \field_arrow j :__semployee0s_Struct_Ptr -> __eemployee1e_Enum_Obj
%LCLop __ \field_arrow j :__sdbase1s_Struct_Ptr -> __eemployee1e_Enum_Obj
%LCLop - __  :int -> int
%LCLop - __  :double -> double
%LCLop __ + __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ + __  :int, __char_Obj_Ptr -> __char_Obj_Ptr
%LCLop __ + __  :int, int -> int
%LCLop __ + __  :double, double -> double
%LCLop __ + __  :__sstdlib0s_Struct_Ptr, int -> __sstdlib0s_Struct_Ptr
%LCLop __ + __  :int, __sstdlib0s_Struct_Ptr -> __sstdlib0s_Struct_Ptr
%LCLop __ + __  :__sstdlib1s_Struct_Ptr, int -> __sstdlib1s_Struct_Ptr
%LCLop __ + __  :int, __sstdlib1s_Struct_Ptr -> __sstdlib1s_Struct_Ptr
%LCLop __ + __  :__void_Obj_Ptr, int -> __void_Obj_Ptr
%LCLop __ + __  :int, __void_Obj_Ptr -> __void_Obj_Ptr
%LCLop __ + __  :__int_Obj_Ptr, int -> __int_Obj_Ptr
%LCLop __ + __  :int, __int_Obj_Ptr -> __int_Obj_Ptr
%LCLop __ + __  :____char_Obj_Ptr_Obj_Ptr, int -> ____char_Obj_Ptr_Obj_Ptr
%LCLop __ + __  :int, ____char_Obj_Ptr_Obj_Ptr -> ____char_Obj_Ptr_Obj_Ptr
%LCLop __ + __  :__FILE_Obj_Ptr, int -> __FILE_Obj_Ptr
%LCLop __ + __  :int, __FILE_Obj_Ptr -> __FILE_Obj_Ptr
%LCLop __ + __  :____void_Obj_Ptr_Obj_Ptr, int -> ____void_Obj_Ptr_Obj_Ptr
%LCLop __ + __  :int, ____void_Obj_Ptr_Obj_Ptr -> ____void_Obj_Ptr_Obj_Ptr
%LCLop __ + __  :__semployee0s_Struct_Ptr, int -> __semployee0s_Struct_Ptr
%LCLop __ + __  :int, __semployee0s_Struct_Ptr -> __semployee0s_Struct_Ptr
%LCLop __ + __  :__sdbase1s_Struct_Ptr, int -> __sdbase1s_Struct_Ptr
%LCLop __ + __  :int, __sdbase1s_Struct_Ptr -> __sdbase1s_Struct_Ptr
%LCLop __ - __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ - __  :__char_Obj_Ptr, __char_Obj_Ptr -> int
%LCLop __ - __  :int, int -> int
%LCLop __ - __  :double, double -> double
%LCLop __ - __  :__sstdlib0s_Struct_Ptr, int -> __sstdlib0s_Struct_Ptr
%LCLop __ - __  :__sstdlib0s_Struct_Ptr, __sstdlib0s_Struct_Ptr -> int
%LCLop __ - __  :__sstdlib1s_Struct_Ptr, int -> __sstdlib1s_Struct_Ptr
%LCLop __ - __  :__sstdlib1s_Struct_Ptr, __sstdlib1s_Struct_Ptr -> int
%LCLop __ - __  :__void_Obj_Ptr, int -> __void_Obj_Ptr
%LCLop __ - __  :__void_Obj_Ptr, __void_Obj_Ptr -> int
%LCLop __ - __  :__int_Obj_Ptr, int -> __int_Obj_Ptr
%LCLop __ - __  :__int_Obj_Ptr, __int_Obj_Ptr -> int
%LCLop __ - __  :____char_Obj_Ptr_Obj_Ptr, int -> ____char_Obj_Ptr_Obj_Ptr
%LCLop __ - __  :____char_Obj_Ptr_Obj_Ptr, ____char_Obj_Ptr_Obj_Ptr -> int
%LCLop __ - __  :__FILE_Obj_Ptr, int -> __FILE_Obj_Ptr
%LCLop __ - __  :__FILE_Obj_Ptr, __FILE_Obj_Ptr -> int
%LCLop __ - __  :____void_Obj_Ptr_Obj_Ptr, int -> ____void_Obj_Ptr_Obj_Ptr
%LCLop __ - __  :____void_Obj_Ptr_Obj_Ptr, ____void_Obj_Ptr_Obj_Ptr -> int
%LCLop __ - __  :__semployee0s_Struct_Ptr, int -> __semployee0s_Struct_Ptr
%LCLop __ - __  :__semployee0s_Struct_Ptr, __semployee0s_Struct_Ptr -> int
%LCLop __ - __  :__sdbase1s_Struct_Ptr, int -> __sdbase1s_Struct_Ptr
%LCLop __ - __  :__sdbase1s_Struct_Ptr, __sdbase1s_Struct_Ptr -> int
%LCLop sizeof :bool -> int
%LCLop sizeof :int -> int
%LCLop sizeof :char -> int
%LCLop sizeof :void -> int
%LCLop sizeof :float -> int
%LCLop sizeof :double -> int
%LCLop sizeof :FILE -> int
%LCLop sizeof :_eemployee0e_Enum -> int
%LCLop sizeof :_eemployee1e_Enum -> int
%LCLop sizeof :eref -> int
%LCLop sizeof :map -> int
%LCLop sizeof :empset -> int
%LCLop sizeof :ereftab -> int
%LCLop sizeof :erc -> int
%LCLop sizeof :_edbase2e_Enum -> int
%LCLop sizeof :db -> int
%LCLop isSub :_char_Vec, int -> bool
%LCLop isSub :__char_Obj_Arr, int -> bool
%LCLop isSub :__sstdlib0s_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__sstdlib0s_Struct_Arr, int -> bool
%LCLop isSub :__sstdlib1s_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__sstdlib1s_Struct_Arr, int -> bool
%LCLop isSub :_void_Vec, int -> bool
%LCLop isSub :__void_Obj_Arr, int -> bool
%LCLop isSub :_int_Vec, int -> bool
%LCLop isSub :__int_Obj_Arr, int -> bool
%LCLop isSub :___char_Obj_Ptr_Vec, int -> bool
%LCLop isSub :____char_Obj_Ptr_Obj_Arr, int -> bool
%LCLop isSub :_FILE_Vec, int -> bool
%LCLop isSub :__FILE_Obj_Arr, int -> bool
%LCLop isSub :___void_Obj_Ptr_Vec, int -> bool
%LCLop isSub :____void_Obj_Ptr_Obj_Arr, int -> bool
%LCLop isSub :__semployee0s_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__semployee0s_Struct_Arr, int -> bool
%LCLop isSub :__sdbase1s_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__sdbase1s_Struct_Arr, int -> bool
%LCLop succ :int -> int
%LCLop pred :int -> int
%LCLop abs :int -> int
%LCLop abs :double -> double
%LCLop div :int, int -> int
%LCLtype float float exposed
%LCLtype bool bool immutable
%LCLconst FALSE bool
%LCLconst TRUE bool
%LCLfcn check : bool -> void 
%LCLfcnGlobals 
%LCLSymbolTableEnd
