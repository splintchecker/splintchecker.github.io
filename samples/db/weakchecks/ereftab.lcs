%PASSED Output from LCLint 2.1a
%LCLimports 
%LCLSortTable
%LCLsort bool immutable nil nil
%LCLsort Bool synonym bool nil
%LCLsort int primitive nil nil
%LCLsort char primitive nil nil
%LCLsort void primitive nil nil
%LCLsort _char_Obj obj char nil
%LCLsort __char_Obj_Ptr ptr _char_Obj nil
%LCLsort __char_Obj_Arr arr _char_Obj nil
%LCLsort _char_Vec vec char __char_Obj_Arr
%LCLsort float primitive nil nil
%LCLsort double primitive nil nil
%LCLsort _eemployee0e_Enum enum eemployee0e nil
%LCLsort gender_ANY enumMem nil nil
%LCLsort FEMALE enumMem nil nil
%LCLsort MALE enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLsort _gender synonym _eemployee0e_Enum nil
%LCLsort _eemployee1e_Enum enum eemployee1e nil
%LCLsort job_ANY enumMem nil nil
%LCLsort NONMGR enumMem nil nil
%LCLsort MGR enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLsort _job synonym _eemployee1e_Enum nil
%LCLsort _semployee0s_Struct str semployee0s nil
%LCLsort j strMem __eemployee1e_Enum_Obj nil
%LCLsort gen strMem __eemployee0e_Enum_Obj nil
%LCLsort salary strMem _int_Obj nil
%LCLsort name strMem __char_Obj_Arr nil
%LCLsort ssNum strMem _int_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort _int_Obj obj int nil
%LCLsort __eemployee0e_Enum_Obj obj _eemployee0e_Enum nil
%LCLsort __eemployee1e_Enum_Obj obj _eemployee1e_Enum nil
%LCLsort _semployee0s_Struct_Tuple tup _semployee0s_Struct nil
%LCLsort __semployee0s_Struct_Ptr ptr _semployee0s_Struct nil
%LCLsort __semployee0s_Struct_Arr arr _semployee0s_Struct nil
%LCLsort __semployee0s_Struct_Tuple_Vec vec _semployee0s_Struct_Tuple __semployee0s_Struct_Arr
%LCLsort _employee synonym _semployee0s_Struct nil
%LCLsort eref immutable nil nil
%LCLsort map immutable nil nil
%LCLsort _map_Obj obj map nil
%LCLsort empset immutable nil nil
%LCLsort _empset_Obj mutable empset nil
%LCLsort ereftab immutable nil nil
%LCLsort _ereftab_Obj mutable ereftab nil
%LCLSortTableEnd
%LCLSymbolTable
%LCLop div :int, int -> int
%LCLop mod :int, int -> int
%LCLop min :int, int -> int
%LCLop max :int, int -> int
%LCLop 0 : -> int
%LCLop 0 : -> double
%LCLop if __ then __ else __  :bool, bool, bool -> bool
%LCLop if __ then __ else __  :bool, int, int -> int
%LCLop if __ then __ else __  :bool, double, double -> double
%LCLop if __ then __ else __  :bool, _char_Vec, _char_Vec -> _char_Vec
%LCLop if __ then __ else __  :bool, char, char -> char
%LCLop 1 : -> int
%LCLop 1 : -> double
%LCLop __ < __  :int, int -> bool
%LCLop __ < __  :double, double -> bool
%LCLop empty : -> _char_Vec
%LCLop __ > __  :int, int -> bool
%LCLop __ > __  :double, double -> bool
%LCLop count :char, _char_Vec -> int
%LCLop head :_char_Vec -> char
%LCLop __ \inv :double -> double
%LCLop init :_char_Vec -> _char_Vec
%LCLop isEmpty :_char_Vec -> bool
%LCLop last :_char_Vec -> char
%LCLop __ \implies __  :bool, bool -> bool
%LCLop len :_char_Vec -> int
%LCLop prefix :_char_Vec, int -> _char_Vec
%LCLop __ / __  :double, double -> double
%LCLop removePrefix :_char_Vec, int -> _char_Vec
%LCLop substring :_char_Vec, int, int -> _char_Vec
%LCLop __ || __  :_char_Vec, _char_Vec -> _char_Vec
%LCLop tail :_char_Vec -> _char_Vec
%LCLop __ \in __  :char, _char_Vec -> bool
%LCLop nullTerminated :_char_Vec -> bool
%LCLop throughNull :_char_Vec -> _char_Vec
%LCLop sameStr :_char_Vec, _char_Vec -> bool
%LCLop lenStr :_char_Vec -> int
%LCLop times10plus :int, int -> int
%LCLop plus1 :int -> int
%LCLop 2 : -> int
%LCLop 3 : -> int
%LCLop 4 : -> int
%LCLop 5 : -> int
%LCLop 6 : -> int
%LCLop 7 : -> int
%LCLop 8 : -> int
%LCLop 9 : -> int
%LCLop MALE : -> _eemployee0e_Enum
%LCLop FEMALE : -> _eemployee0e_Enum
%LCLop gender_ANY : -> _eemployee0e_Enum
%LCLop __ * __  :int, int -> int
%LCLop __ * __  :double, double -> double
%LCLtag eemployee0e enum
%LCLop true : -> bool
%LCLop false : -> bool
%LCLop MGR : -> _eemployee1e_Enum
%LCLop NONMGR : -> _eemployee1e_Enum
%LCLop job_ANY : -> _eemployee1e_Enum
%LCLop __ \and __  :bool, bool -> bool
%LCLop __ \or __  :bool, bool -> bool
%LCLtag eemployee1e enum
%LCLop __ \eq __  :bool, bool -> bool
%LCLop __ \eq __  :int, int -> bool
%LCLop __ \eq __  :double, double -> bool
%LCLop __ \eq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \eq __  :char, char -> bool
%LCLop \not __  :bool -> bool
%LCLop __ \neq __  :bool, bool -> bool
%LCLop __ \neq __  :int, int -> bool
%LCLop __ \neq __  :double, double -> bool
%LCLop __ \neq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \neq __  :char, char -> bool
%LCLop { __ } :char -> _char_Vec
%LCLtag semployee0s struct
%LCLop __ [] :__char_Obj_Ptr -> __char_Obj_Arr
%LCLop __ [] :__semployee0s_Struct_Ptr -> __semployee0s_Struct_Arr
%LCLop __ [__] :_char_Vec, int -> char
%LCLop __ [__] :__char_Obj_Arr, int -> _char_Obj
%LCLop __ [__] :__semployee0s_Struct_Tuple_Vec, int -> _semployee0s_Struct_Tuple
%LCLop __ [__] :__semployee0s_Struct_Arr, int -> _semployee0s_Struct
%LCLop __ |- __  :_char_Vec, char -> _char_Vec
%LCLop [__, __, __, __, __] :_eemployee1e_Enum, _eemployee0e_Enum, int, _char_Vec, int -> _semployee0s_Struct_Tuple
%LCLop __ -| __  :char, _char_Vec -> _char_Vec
%LCLop __ \leq __  :int, int -> bool
%LCLop __ \leq __  :double, double -> bool
%LCLop __ \geq __  :int, int -> bool
%LCLop __ \geq __  :double, double -> bool
%LCLop null : -> char
%LCLop __ \select ssNum :_semployee0s_Struct_Tuple -> int
%LCLop __ \select ssNum :_semployee0s_Struct -> _int_Obj
%LCLop __ \select name :_semployee0s_Struct_Tuple -> _char_Vec
%LCLop __ \select name :_semployee0s_Struct -> __char_Obj_Arr
%LCLop __ \field_arrow ssNum :__semployee0s_Struct_Ptr -> _int_Obj
%LCLop __ \select salary :_semployee0s_Struct_Tuple -> int
%LCLop __ \select salary :_semployee0s_Struct -> _int_Obj
%LCLop __ \field_arrow name :__semployee0s_Struct_Ptr -> __char_Obj_Arr
%LCLop __ \select gen :_semployee0s_Struct_Tuple -> _eemployee0e_Enum
%LCLop __ \select gen :_semployee0s_Struct -> __eemployee0e_Enum_Obj
%LCLop __ \field_arrow salary :__semployee0s_Struct_Ptr -> _int_Obj
%LCLop __ \select j :_semployee0s_Struct_Tuple -> _eemployee1e_Enum
%LCLop __ \select j :_semployee0s_Struct -> __eemployee1e_Enum_Obj
%LCLop __ \field_arrow gen :__semployee0s_Struct_Ptr -> __eemployee0e_Enum_Obj
%LCLop __ \field_arrow j :__semployee0s_Struct_Ptr -> __eemployee1e_Enum_Obj
%LCLop NIL : -> __char_Obj_Ptr
%LCLop NIL : -> __semployee0s_Struct_Ptr
%LCLop - __  :int -> int
%LCLop - __  :double -> double
%LCLop __ + __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ + __  :int, __char_Obj_Ptr -> __char_Obj_Ptr
%LCLop __ + __  :int, int -> int
%LCLop __ + __  :double, double -> double
%LCLop __ + __  :__semployee0s_Struct_Ptr, int -> __semployee0s_Struct_Ptr
%LCLop __ + __  :int, __semployee0s_Struct_Ptr -> __semployee0s_Struct_Ptr
%LCLop __ - __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ - __  :__char_Obj_Ptr, __char_Obj_Ptr -> int
%LCLop __ - __  :int, int -> int
%LCLop __ - __  :double, double -> double
%LCLop __ - __  :__semployee0s_Struct_Ptr, int -> __semployee0s_Struct_Ptr
%LCLop __ - __  :__semployee0s_Struct_Ptr, __semployee0s_Struct_Ptr -> int
%LCLop sizeof :bool -> int
%LCLop sizeof :int -> int
%LCLop sizeof :char -> int
%LCLop sizeof :void -> int
%LCLop sizeof :float -> int
%LCLop sizeof :double -> int
%LCLop sizeof :_eemployee0e_Enum -> int
%LCLop sizeof :_eemployee1e_Enum -> int
%LCLop sizeof :eref -> int
%LCLop sizeof :map -> int
%LCLop sizeof :empset -> int
%LCLop sizeof :ereftab -> int
%LCLop isSub :_char_Vec, int -> bool
%LCLop isSub :__char_Obj_Arr, int -> bool
%LCLop isSub :__semployee0s_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__semployee0s_Struct_Arr, int -> bool
%LCLop succ :int -> int
%LCLop pred :int -> int
%LCLop abs :int -> int
%LCLop abs :double -> double
%LCLtype float float exposed
%LCLtype bool bool immutable
%LCLconst FALSE bool
%LCLconst TRUE bool
%LCLtype float float exposed
%LCLtype bool bool immutable
%LCLconst FALSE bool
%LCLconst TRUE bool
%LCLconst maxEmployeeName int
%LCLconst employeePrintSize int
%LCLenumConst MALE _eemployee0e_Enum
%LCLenumConst FEMALE _eemployee0e_Enum
%LCLenumConst gender_ANY _eemployee0e_Enum
%LCLtype gender _gender exposed
%LCLenumConst MGR _eemployee1e_Enum
%LCLenumConst NONMGR _eemployee1e_Enum
%LCLenumConst job_ANY _eemployee1e_Enum
%LCLtype job _job exposed
%LCLtype employee _employee exposed
%LCLfcn employee_sprint : __char_Obj_Arr, _semployee0s_Struct_Tuple -> void 
%LCLfcnGlobals 
%LCLfcn employee_equal : __semployee0s_Struct_Ptr, __semployee0s_Struct_Ptr -> bool 
%LCLfcnGlobals 
%LCLfcn employee_setName : __semployee0s_Struct_Ptr, __char_Obj_Arr -> bool 
%LCLfcnGlobals 
%LCLfcn employee_initMod :  -> void 
%LCLfcnGlobals 
%LCLtype float float exposed
%LCLtype bool bool immutable
%LCLconst FALSE bool
%LCLconst TRUE bool
%LCLtype float float exposed
%LCLtype bool bool immutable
%LCLconst FALSE bool
%LCLconst TRUE bool
%LCLconst maxEmployeeName int
%LCLconst employeePrintSize int
%LCLenumConst MALE _eemployee0e_Enum
%LCLenumConst FEMALE _eemployee0e_Enum
%LCLenumConst gender_ANY _eemployee0e_Enum
%LCLtype gender _gender exposed
%LCLenumConst MGR _eemployee1e_Enum
%LCLenumConst NONMGR _eemployee1e_Enum
%LCLenumConst job_ANY _eemployee1e_Enum
%LCLtype job _job exposed
%LCLtype employee _employee exposed
%LCLfcn employee_sprint : __char_Obj_Arr, _semployee0s_Struct_Tuple -> void 
%LCLfcnGlobals 
%LCLfcn employee_equal : __semployee0s_Struct_Ptr, __semployee0s_Struct_Ptr -> bool 
%LCLfcnGlobals 
%LCLfcn employee_setName : __semployee0s_Struct_Ptr, __char_Obj_Arr -> bool 
%LCLfcnGlobals 
%LCLfcn employee_initMod :  -> void 
%LCLfcnGlobals 
%LCLtype eref eref immutable
%LCLtype map map immutable
%LCLvar m _map_Obj
%LCLconst erefNIL eref
%LCLfcn eref_alloc :  -> eref 
%LCLfcnGlobals _map_Obj m; 
%LCLfcn eref_free : eref -> void 
%LCLfcnGlobals _map_Obj m; 
%LCLfcn eref_assign : eref, _semployee0s_Struct_Tuple -> void 
%LCLfcnGlobals _map_Obj m; 
%LCLfcn eref_get : eref -> _semployee0s_Struct 
%LCLfcnGlobals _map_Obj m; 
%LCLfcn eref_equal : eref, eref -> bool 
%LCLfcnGlobals 
%LCLfcn eref_initMod :  -> void 
%LCLfcnGlobals _map_Obj m; 
%LCLtype ereftab _ereftab_Obj mutable
%LCLfcn ereftab_create :  -> _ereftab_Obj 
%LCLfcnGlobals 
%LCLfcn ereftab_insert : _ereftab_Obj, _semployee0s_Struct_Tuple, eref -> void 
%LCLfcnGlobals 
%LCLfcn ereftab_delete : _ereftab_Obj, eref -> bool 
%LCLfcnGlobals 
%LCLfcn ereftab_lookup : _semployee0s_Struct_Tuple, _ereftab_Obj -> eref 
%LCLfcnGlobals 
%LCLfcn ereftab_initMod :  -> void 
%LCLfcnGlobals 
%LCLSymbolTableEnd
